# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
    push:
        branches:
            - main
        # tags: [ '*.*.*' ]

env:
    # Use docker.io for Docker Hub if empty
    REGISTRY: docker.io

jobs:
    build_connector:

        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write

        steps:
            -   name: Checkout repository
                uses: actions/checkout@v2

            -   name: Set up JDK 11
                uses: actions/setup-java@v2
                with:
                    java-version: '11'
                    distribution: 'temurin'
                    server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
                    settings-path: ${{ github.workspace }} # location for the settings.xml file

            -   name: Extract Maven project version
                run: echo ::set-output name=version::$(mvn org.apache.maven.plugins:maven-help-plugin:evaluate -Dexpression=project.version -q -DforceStdout)
                id: project_version

            -   name: Build with Maven
                run: mvn -B install --file pom.xml

            -   name: Publish to GitHub Packages Apache Maven
                run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
                env:
                    GITHUB_TOKEN: ${{ secrets.PACKAGE_REGISTRY_TOKEN }}

            -   name: Release
                uses: actions/create-release@v1
                id: create_release
                with:
                    draft: false
                    prerelease: false
                    release_name: v${{ steps.project_version.outputs.version }}
                    tag_name: ${{ github.ref }}
                    body_path: CHANGELOG.md
                env:
                    GITHUB_TOKEN: ${{ secrets.PACKAGE_REGISTRY_TOKEN }}

            -   name: Upload artifact
                uses: actions/upload-release-asset@v1
                env:
                    GITHUB_TOKEN: ${{ secrets.PACKAGE_REGISTRY_TOKEN }}
                with:
                    upload_url: ${{ steps.create_release.outputs.upload_url }}
                    asset_path: ./target/ps-gcs-syncer_${{ steps.project_version.outputs.version }}.car
                    asset_name: ps-gcs-syncer_${{ steps.project_version.outputs.version }}.car
                    asset_content_type: application/zip